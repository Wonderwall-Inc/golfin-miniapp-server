"""all modesl

Revision ID: fd5abc0e216e
Revises: 68d9b1559974
Create Date: 2024-08-27 11:49:37.921963

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fd5abc0e216e'
down_revision: Union[str, None] = '68d9b1559974'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('activity',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('is_logged_in', sa.Boolean(), nullable=False),
    sa.Column('login_streak', sa.Integer(), nullable=False),
    sa.Column('total_logins', sa.Integer(), nullable=False),
    sa.Column('last_action_time', sa.DateTime(), nullable=False),
    sa.Column('last_login_time', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('custom_logs', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_activity_id'), 'activity', ['id'], unique=True)
    op.create_table('friend',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status', sa.Enum('pending', 'active', 'rejected', name='friendStatusTpye'), nullable=False),
    sa.Column('sender_id', sa.Integer(), nullable=False),
    sa.Column('receiver_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('custom_logs', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['receiver_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['sender_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_friend_id'), 'friend', ['id'], unique=True)
    op.create_table('point',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('extra_profit_per_hour', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('custom_logs', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_point_id'), 'point', ['id'], unique=True)
    op.create_table('social_media',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('youtube_id', sa.String(length=100), nullable=True),
    sa.Column('youtube_is_following', sa.Boolean(), nullable=True),
    sa.Column('youtube_is_viewed', sa.Boolean(), nullable=True),
    sa.Column('youtube_view_date', sa.DateTime(), nullable=True),
    sa.Column('facebook_id', sa.String(length=100), nullable=True),
    sa.Column('facebook_is_following', sa.Boolean(), nullable=True),
    sa.Column('facebook_followed_date', sa.DateTime(), nullable=True),
    sa.Column('instagram_id', sa.String(length=100), nullable=True),
    sa.Column('instagram_is_following', sa.Boolean(), nullable=True),
    sa.Column('instagram_follow_trigger_verify_date', sa.DateTime(), nullable=True),
    sa.Column('instagram_followed_date', sa.DateTime(), nullable=True),
    sa.Column('instagram_tagged', sa.Boolean(), nullable=True),
    sa.Column('instagram_tagged_date', sa.DateTime(), nullable=True),
    sa.Column('instagram_reposted', sa.Boolean(), nullable=True),
    sa.Column('instagram_reposted_date', sa.DateTime(), nullable=True),
    sa.Column('telegram_id', sa.String(length=100), nullable=True),
    sa.Column('telegram_is_following', sa.Boolean(), nullable=True),
    sa.Column('telegram_followed_date', sa.DateTime(), nullable=True),
    sa.Column('x_id', sa.String(length=100), nullable=True),
    sa.Column('x_is_following', sa.Boolean(), nullable=True),
    sa.Column('x_followed_date', sa.DateTime(), nullable=True),
    sa.Column('discord_id', sa.String(length=100), nullable=True),
    sa.Column('discord_is_following', sa.Boolean(), nullable=True),
    sa.Column('discord_followed_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('custom_logs', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_social_media_id'), 'social_media', ['id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_social_media_id'), table_name='social_media')
    op.drop_table('social_media')
    op.drop_index(op.f('ix_point_id'), table_name='point')
    op.drop_table('point')
    op.drop_index(op.f('ix_friend_id'), table_name='friend')
    op.drop_table('friend')
    op.drop_index(op.f('ix_activity_id'), table_name='activity')
    op.drop_table('activity')
    # ### end Alembic commands ###
